// <auto-generated />
using System;
using AdamMIS.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AdamMIS.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250826101006_UpdateEmployeeFormTable3")]
    partial class UpdateEmployeeFormTable3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AdamMIS.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("HeadId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            HeadId = "b1855db6-6ac2-4750-a279-b4f52e2dc05f",
                            Name = "IT"
                        },
                        new
                        {
                            Id = 2,
                            HeadId = "b1855db6-6ac2-4750-a279-b4f52e2dc05f",
                            Name = "HR"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Finance"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Operations"
                        });
                });

            modelBuilder.Entity("AdamMIS.Entities.EmployeeEntities.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("CEOApproved")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CEOApprovedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CEOApprovedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CEOSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrentStep")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("HR");

                    b.Property<bool>("DepartmentApproved")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DepartmentApprovedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepartmentApprovedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("DoctorStatus")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EmailId")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("EmployeeNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("ExternalEmail")
                        .HasColumnType("bit");

                    b.Property<string>("FilesSharing")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("HRApproved")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("HRApprovedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("HRApprovedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("ITApproved")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ITApprovedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ITApprovedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool?>("InternalEmail")
                        .HasColumnType("bit");

                    b.Property<bool?>("InternetAccess")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMedical")
                        .HasColumnType("bit");

                    b.Property<string>("MedicalProfileType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MedicalServiceCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NameArabic")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NameEnglish")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NetworkId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PayrollNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PersonalEmail")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Qualification")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SeniorDoctorName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Specialty")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Draft");

                    b.Property<string>("SystemPermissions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CEOApprovedById");

                    b.HasIndex("DepartmentApprovedById");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("EmployeeNumber")
                        .IsUnique();

                    b.HasIndex("HRApprovedById");

                    b.HasIndex("ITApprovedById");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("AdamMIS.Entities.Messaging.Messagee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("RecipientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RecipientId")
                        .HasDatabaseName("IX_Messages_Recipient");

                    b.HasIndex("SenderId", "RecipientId", "SentAt")
                        .HasDatabaseName("IX_Messages_Conversation");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("AdamMIS.Entities.MetaBase.Metabase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Metabases");
                });

            modelBuilder.Entity("AdamMIS.Entities.MetaBase.UsersMetabases", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("AssignedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MetabaseId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MetabaseId");

                    b.HasIndex("UserId");

                    b.ToTable("UsersMetabases");
                });

            modelBuilder.Entity("AdamMIS.Entities.ReportsEnitites.RCategories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("RCategories", (string)null);
                });

            modelBuilder.Entity("AdamMIS.Entities.ReportsEnitites.Reports", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Reports", (string)null);
                });

            modelBuilder.Entity("AdamMIS.Entities.ReportsEnitites.UserReports", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AssignedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("AssignedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ReportId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ReportId");

                    b.HasIndex("UserId");

                    b.ToTable("UserReports", (string)null);
                });

            modelBuilder.Entity("AdamMIS.Entities.SystemLogs.AcivityLogs", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("IpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastActivityTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LoginTime")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("SessionTime")
                        .HasColumnType("time");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("acivityLogs");
                });

            modelBuilder.Entity("AdamMIS.Entities.SystemLogs.SystemLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SystemLog");
                });

            modelBuilder.Entity("AdamMIS.Entities.UserEntities.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeafult")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "35904F06-0FD5-47F3-ACF2-23B77C14F947",
                            ConcurrencyStamp = "F851A5D6-1A5C-48BA-8C07-23DD5239319B",
                            IsDeafult = false,
                            IsDeleted = false,
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = "7DFA4DBB-644A-4759-BC51-FB23455DB7C1",
                            ConcurrencyStamp = "62263B17-1587-4F52-9077-976245E626EA",
                            IsDeafult = true,
                            IsDeleted = false,
                            Name = "Member",
                            NormalizedName = "MEMBER"
                        });
                });

            modelBuilder.Entity("AdamMIS.Entities.UserEntities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("InternalPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PhotoPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "03174B27-D47B-4C12-94AD-676B3BF14BC2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "07C2800E-4457-4360-8102-A99EC489446D",
                            EmailConfirmed = true,
                            IsDisabled = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "MOHAMEDKANDIL",
                            PasswordHash = "AQAAAAIAAYagAAAAEM4TUd1hxXhd1JFOD5PEbk1AObQ8geEBFS9Hnyxl4Oepd38XzMusanH9I/fsoewzhw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "75B0F3ACD7DE4D088DA0594E3ACDC1EF",
                            TwoFactorEnabled = false,
                            UserName = "MohamedKandil"
                        });
                });

            modelBuilder.Entity("AdamMIS.Entities.UserEntities.ApplicationUserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationRoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("AssignedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationRoleId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("ApplicationUserRole");
                });

            modelBuilder.Entity("AdamMIS.Entities.UserPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Permission")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "Permission")
                        .IsUnique()
                        .HasDatabaseName("IX_UserPermissions_UserId_Permission");

                    b.ToTable("UserPermissions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = -1,
                            ClaimType = "permissions",
                            ClaimValue = "Register Users",
                            RoleId = "35904F06-0FD5-47F3-ACF2-23B77C14F947"
                        },
                        new
                        {
                            Id = -2,
                            ClaimType = "permissions",
                            ClaimValue = "Delete Users",
                            RoleId = "35904F06-0FD5-47F3-ACF2-23B77C14F947"
                        },
                        new
                        {
                            Id = -3,
                            ClaimType = "permissions",
                            ClaimValue = "Update Users",
                            RoleId = "35904F06-0FD5-47F3-ACF2-23B77C14F947"
                        },
                        new
                        {
                            Id = -4,
                            ClaimType = "permissions",
                            ClaimValue = "Read Users",
                            RoleId = "35904F06-0FD5-47F3-ACF2-23B77C14F947"
                        },
                        new
                        {
                            Id = -5,
                            ClaimType = "permissions",
                            ClaimValue = "Read Reports",
                            RoleId = "35904F06-0FD5-47F3-ACF2-23B77C14F947"
                        },
                        new
                        {
                            Id = -6,
                            ClaimType = "permissions",
                            ClaimValue = "Add Reports",
                            RoleId = "35904F06-0FD5-47F3-ACF2-23B77C14F947"
                        },
                        new
                        {
                            Id = -7,
                            ClaimType = "permissions",
                            ClaimValue = "Update Reports",
                            RoleId = "35904F06-0FD5-47F3-ACF2-23B77C14F947"
                        },
                        new
                        {
                            Id = -8,
                            ClaimType = "permissions",
                            ClaimValue = "Delete Reports",
                            RoleId = "35904F06-0FD5-47F3-ACF2-23B77C14F947"
                        },
                        new
                        {
                            Id = -9,
                            ClaimType = "permissions",
                            ClaimValue = "Read Categories",
                            RoleId = "35904F06-0FD5-47F3-ACF2-23B77C14F947"
                        },
                        new
                        {
                            Id = -10,
                            ClaimType = "permissions",
                            ClaimValue = "Add Categories",
                            RoleId = "35904F06-0FD5-47F3-ACF2-23B77C14F947"
                        },
                        new
                        {
                            Id = -11,
                            ClaimType = "permissions",
                            ClaimValue = "Update Categories",
                            RoleId = "35904F06-0FD5-47F3-ACF2-23B77C14F947"
                        },
                        new
                        {
                            Id = -12,
                            ClaimType = "permissions",
                            ClaimValue = "Delete Categories",
                            RoleId = "35904F06-0FD5-47F3-ACF2-23B77C14F947"
                        },
                        new
                        {
                            Id = -13,
                            ClaimType = "permissions",
                            ClaimValue = "Read Roles",
                            RoleId = "35904F06-0FD5-47F3-ACF2-23B77C14F947"
                        },
                        new
                        {
                            Id = -14,
                            ClaimType = "permissions",
                            ClaimValue = "Add Roles",
                            RoleId = "35904F06-0FD5-47F3-ACF2-23B77C14F947"
                        },
                        new
                        {
                            Id = -15,
                            ClaimType = "permissions",
                            ClaimValue = "Update Roles",
                            RoleId = "35904F06-0FD5-47F3-ACF2-23B77C14F947"
                        },
                        new
                        {
                            Id = -16,
                            ClaimType = "permissions",
                            ClaimValue = "Delete Roles",
                            RoleId = "35904F06-0FD5-47F3-ACF2-23B77C14F947"
                        },
                        new
                        {
                            Id = -17,
                            ClaimType = "permissions",
                            ClaimValue = "Read Result",
                            RoleId = "35904F06-0FD5-47F3-ACF2-23B77C14F947"
                        },
                        new
                        {
                            Id = -18,
                            ClaimType = "permissions",
                            ClaimValue = "View Report Manager",
                            RoleId = "35904F06-0FD5-47F3-ACF2-23B77C14F947"
                        },
                        new
                        {
                            Id = -19,
                            ClaimType = "permissions",
                            ClaimValue = "View Admin Manager",
                            RoleId = "35904F06-0FD5-47F3-ACF2-23B77C14F947"
                        },
                        new
                        {
                            Id = -20,
                            ClaimType = "permissions",
                            ClaimValue = "View System Logs",
                            RoleId = "35904F06-0FD5-47F3-ACF2-23B77C14F947"
                        },
                        new
                        {
                            Id = -21,
                            ClaimType = "permissions",
                            ClaimValue = "View Activity Logs",
                            RoleId = "35904F06-0FD5-47F3-ACF2-23B77C14F947"
                        },
                        new
                        {
                            Id = -22,
                            ClaimType = "permissions",
                            ClaimValue = "View MRM",
                            RoleId = "35904F06-0FD5-47F3-ACF2-23B77C14F947"
                        },
                        new
                        {
                            Id = -23,
                            ClaimType = "permissions",
                            ClaimValue = "View F DMS",
                            RoleId = "35904F06-0FD5-47F3-ACF2-23B77C14F947"
                        },
                        new
                        {
                            Id = -24,
                            ClaimType = "permissions",
                            ClaimValue = "View H DMS",
                            RoleId = "35904F06-0FD5-47F3-ACF2-23B77C14F947"
                        },
                        new
                        {
                            Id = -25,
                            ClaimType = "permissions",
                            ClaimValue = "View AIMS",
                            RoleId = "35904F06-0FD5-47F3-ACF2-23B77C14F947"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "03174B27-D47B-4C12-94AD-676B3BF14BC2",
                            RoleId = "35904F06-0FD5-47F3-ACF2-23B77C14F947"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AdamMIS.Entities.EmployeeEntities.Employee", b =>
                {
                    b.HasOne("AdamMIS.Entities.UserEntities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("CEOApprovedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdamMIS.Entities.UserEntities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("DepartmentApprovedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdamMIS.Entities.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AdamMIS.Entities.UserEntities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("HRApprovedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdamMIS.Entities.UserEntities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("ITApprovedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Department");
                });

            modelBuilder.Entity("AdamMIS.Entities.MetaBase.UsersMetabases", b =>
                {
                    b.HasOne("AdamMIS.Entities.MetaBase.Metabase", "MetaBase")
                        .WithMany("UserMetabase")
                        .HasForeignKey("MetabaseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AdamMIS.Entities.UserEntities.ApplicationUser", "User")
                        .WithMany("UserMetabase")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MetaBase");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AdamMIS.Entities.ReportsEnitites.Reports", b =>
                {
                    b.HasOne("AdamMIS.Entities.ReportsEnitites.RCategories", "Category")
                        .WithMany("Reports")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("AdamMIS.Entities.ReportsEnitites.UserReports", b =>
                {
                    b.HasOne("AdamMIS.Entities.ReportsEnitites.Reports", "Report")
                        .WithMany("UserReports")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdamMIS.Entities.UserEntities.ApplicationUser", "User")
                        .WithMany("UserReports")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Report");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AdamMIS.Entities.UserEntities.ApplicationUser", b =>
                {
                    b.HasOne("AdamMIS.Entities.Department", "Department")
                        .WithMany("Users")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Department");
                });

            modelBuilder.Entity("AdamMIS.Entities.UserEntities.ApplicationUserRole", b =>
                {
                    b.HasOne("AdamMIS.Entities.UserEntities.ApplicationRole", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("ApplicationRoleId");

                    b.HasOne("AdamMIS.Entities.UserEntities.ApplicationUser", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("AdamMIS.Entities.UserEntities.ApplicationRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdamMIS.Entities.UserEntities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AdamMIS.Entities.UserPermission", b =>
                {
                    b.HasOne("AdamMIS.Entities.UserEntities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("AdamMIS.Entities.UserEntities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AdamMIS.Entities.UserEntities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AdamMIS.Entities.UserEntities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("AdamMIS.Entities.UserEntities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AdamMIS.Entities.UserEntities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AdamMIS.Entities.UserEntities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("AdamMIS.Entities.Department", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("AdamMIS.Entities.MetaBase.Metabase", b =>
                {
                    b.Navigation("UserMetabase");
                });

            modelBuilder.Entity("AdamMIS.Entities.ReportsEnitites.RCategories", b =>
                {
                    b.Navigation("Reports");
                });

            modelBuilder.Entity("AdamMIS.Entities.ReportsEnitites.Reports", b =>
                {
                    b.Navigation("UserReports");
                });

            modelBuilder.Entity("AdamMIS.Entities.UserEntities.ApplicationRole", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("AdamMIS.Entities.UserEntities.ApplicationUser", b =>
                {
                    b.Navigation("UserMetabase");

                    b.Navigation("UserReports");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
